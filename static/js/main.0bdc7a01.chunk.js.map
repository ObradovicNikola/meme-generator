{"version":3,"sources":["components/Header.js","components/MemeGenerator.js","App.js","serviceWorker.js","index.js"],"names":["Header","src","alt","MemeGenerator","state","topText","bottomText","randomImg","allMemeImages","handleChange","bind","handleNextMeme","event","this","setState","target","name","value","preventDefault","randNumber","Math","floor","random","length","randMemeImage","url","fetch","then","response","json","memes","data","className","type","placeholder","onChange","onClick","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gQAaeA,MAXf,WACI,OACI,6BACI,gCACI,yBAAKC,IAAI,0EAA0EC,IAAI,YACvF,gD,iDC6DDC,E,YAjEX,aAAc,IAAD,8BACT,+CAEKC,MAAQ,CACTC,QAAS,GACTC,WAAY,GACZC,UAAW,0DACXC,cAAe,IAGnB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,eAAiB,EAAKA,eAAeD,KAApB,gBAXb,E,0EAcAE,GACTC,KAAKC,SAAL,eAAgBF,EAAMG,OAAOC,KAAOJ,EAAMG,OAAOE,U,qCAGtCL,GACXA,EAAMM,iBAEN,IAAMC,EAAaC,KAAKC,MAAMD,KAAKE,SAAWT,KAAKT,MAAMI,cAAce,QACjEC,EAAgBX,KAAKT,MAAMI,cAAcW,GAAYM,IAC3DZ,KAAKC,SAAS,CAACP,UAAWiB,M,0CAGV,IAAD,OACfE,MAAM,qCACDC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAC,GAAc,IACTE,EAASF,EAASG,KAAlBD,MACP,EAAKhB,SAAS,CAACN,cAAesB,Q,+BAKtC,OACI,6BACI,0BAAME,UAAU,aACZ,2BACIC,KAAK,OACLjB,KAAK,UACLkB,YAAY,WACZjB,MAAOJ,KAAKT,MAAMC,QAClB8B,SAAUtB,KAAKJ,eAEnB,2BACIwB,KAAK,OACLjB,KAAK,aACLkB,YAAY,cACZjB,MAAOJ,KAAKT,MAAME,WAClB6B,SAAUtB,KAAKJ,eAEnB,4BAAQ2B,QAASvB,KAAKF,gBAAtB,SAEJ,yBAAKqB,UAAU,QACX,yBAAK/B,IAAKY,KAAKT,MAAMG,UAAWL,IAAI,KACpC,wBAAI8B,UAAU,OAAOnB,KAAKT,MAAMC,SAChC,wBAAI2B,UAAU,UAAUnB,KAAKT,MAAME,kB,GA3D3B+B,IAAMC,WCanBC,MATf,WACE,OACE,yBAAKP,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCEcQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxB,KAAK,SAAAyB,GACjCA,EAAaC,iB","file":"static/js/main.0bdc7a01.chunk.js","sourcesContent":["import React from 'react'\n\nfunction Header() {\n    return (\n        <div>\n            <header>\n                <img src=\"https://i.pinimg.com/736x/5b/43/1e/5b431e08dd23a694cd7ad4e6f29b474c.jpg\" alt=\"Really?\"/>\n                <p>Meme Generator</p>\n            </header>\n        </div>\n    )\n}\n\nexport default Header\n","import React from 'react'\n\nclass MemeGenerator extends React.Component {\n    constructor(){\n        super()\n\n        this.state = {\n            topText: \"\",\n            bottomText: \"\",\n            randomImg: \"https://imgflip.com/s/meme/Roll-Safe-Think-About-It.jpg\",\n            allMemeImages: []\n        }\n\n        this.handleChange = this.handleChange.bind(this)\n        this.handleNextMeme = this.handleNextMeme.bind(this)\n    }\n\n    handleChange(event){\n        this.setState({[event.target.name]: event.target.value})\n    }\n\n    handleNextMeme(event){\n        event.preventDefault()\n\n        const randNumber = Math.floor(Math.random() * this.state.allMemeImages.length)\n        const randMemeImage = this.state.allMemeImages[randNumber].url\n        this.setState({randomImg: randMemeImage})\n    }\n\n    componentDidMount(){\n        fetch(\"https://api.imgFlip.com/get_memes\")\n            .then(response => response.json())\n            .then(response =>  {\n                const {memes} = response.data\n                this.setState({allMemeImages: memes})\n            })\n    }\n\n    render(){\n        return(\n            <div>\n                <form className=\"meme-form\">\n                    <input \n                        type=\"text\"\n                        name=\"topText\"\n                        placeholder=\"Top Text\"\n                        value={this.state.topText}\n                        onChange={this.handleChange}\n                    />\n                    <input \n                        type=\"text\"\n                        name=\"bottomText\"\n                        placeholder=\"Bottom Text\"\n                        value={this.state.bottomText}\n                        onChange={this.handleChange}\n                    />\n                    <button onClick={this.handleNextMeme}>Meme</button>\n                </form>\n                <div className=\"meme\">\n                    <img src={this.state.randomImg} alt=\"\" />\n                    <h2 className=\"top\">{this.state.topText}</h2>\n                    <h2 className=\"bottom\">{this.state.bottomText}</h2>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default MemeGenerator","import React from 'react';\nimport './App.css';\nimport Header from './components/Header'\nimport MemeGenerator from './components/MemeGenerator'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <MemeGenerator />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}